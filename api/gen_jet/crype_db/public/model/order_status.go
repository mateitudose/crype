//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type OrderStatus string

const (
	OrderStatus_Pending    OrderStatus = "PENDING"
	OrderStatus_Processing OrderStatus = "PROCESSING"
	OrderStatus_Confirmed  OrderStatus = "CONFIRMED"
	OrderStatus_Failed     OrderStatus = "FAILED"
	OrderStatus_Canceled   OrderStatus = "CANCELED"
)

var OrderStatusAllValues = []OrderStatus{
	OrderStatus_Pending,
	OrderStatus_Processing,
	OrderStatus_Confirmed,
	OrderStatus_Failed,
	OrderStatus_Canceled,
}

func (e *OrderStatus) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "PENDING":
		*e = OrderStatus_Pending
	case "PROCESSING":
		*e = OrderStatus_Processing
	case "CONFIRMED":
		*e = OrderStatus_Confirmed
	case "FAILED":
		*e = OrderStatus_Failed
	case "CANCELED":
		*e = OrderStatus_Canceled
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for OrderStatus enum")
	}

	return nil
}

func (e OrderStatus) String() string {
	return string(e)
}
