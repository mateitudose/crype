//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PaymentAddresses = newPaymentAddressesTable("public", "payment_addresses", "")

type paymentAddressesTable struct {
	postgres.Table

	// Columns
	Address    postgres.ColumnString
	PrivateKey postgres.ColumnString
	CreatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type PaymentAddressesTable struct {
	paymentAddressesTable

	EXCLUDED paymentAddressesTable
}

// AS creates new PaymentAddressesTable with assigned alias
func (a PaymentAddressesTable) AS(alias string) *PaymentAddressesTable {
	return newPaymentAddressesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PaymentAddressesTable with assigned schema name
func (a PaymentAddressesTable) FromSchema(schemaName string) *PaymentAddressesTable {
	return newPaymentAddressesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PaymentAddressesTable with assigned table prefix
func (a PaymentAddressesTable) WithPrefix(prefix string) *PaymentAddressesTable {
	return newPaymentAddressesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PaymentAddressesTable with assigned table suffix
func (a PaymentAddressesTable) WithSuffix(suffix string) *PaymentAddressesTable {
	return newPaymentAddressesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPaymentAddressesTable(schemaName, tableName, alias string) *PaymentAddressesTable {
	return &PaymentAddressesTable{
		paymentAddressesTable: newPaymentAddressesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newPaymentAddressesTableImpl("", "excluded", ""),
	}
}

func newPaymentAddressesTableImpl(schemaName, tableName, alias string) paymentAddressesTable {
	var (
		AddressColumn    = postgres.StringColumn("address")
		PrivateKeyColumn = postgres.StringColumn("private_key")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		allColumns       = postgres.ColumnList{AddressColumn, PrivateKeyColumn, CreatedAtColumn}
		mutableColumns   = postgres.ColumnList{PrivateKeyColumn, CreatedAtColumn}
		defaultColumns   = postgres.ColumnList{CreatedAtColumn}
	)

	return paymentAddressesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Address:    AddressColumn,
		PrivateKey: PrivateKeyColumn,
		CreatedAt:  CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
